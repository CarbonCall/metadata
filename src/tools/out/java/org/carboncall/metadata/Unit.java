// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

package org.carboncall.metadata;

/**
 * Protobuf enum {@code carboncall.metadata.Unit}
 */
public enum Unit
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TONNE_CO2E = 0;</code>
   */
  TONNE_CO2E(0),
  /**
   * <code>TONNE_CO2 = 1;</code>
   */
  TONNE_CO2(1),
  /**
   * <code>TONNE_CH4 = 2;</code>
   */
  TONNE_CH4(2),
  /**
   * <code>TONNE_N2O = 3;</code>
   */
  TONNE_N2O(3),
  /**
   * <code>TONNE_S = 4;</code>
   */
  TONNE_S(4),
  /**
   * <code>TONNE_NOX = 5;</code>
   */
  TONNE_NOX(5),
  /**
   * <code>TONNE_SOX = 6;</code>
   */
  TONNE_SOX(6),
  /**
   * <code>TONNE_PM10 = 7;</code>
   */
  TONNE_PM10(7),
  /**
   * <code>TONNE_PM2_5 = 8;</code>
   */
  TONNE_PM2_5(8),
  /**
   * <code>TONNE_VOC = 9;</code>
   */
  TONNE_VOC(9),
  /**
   * <code>TONNE_NH3 = 10;</code>
   */
  TONNE_NH3(10),
  /**
   * <code>TONNE_PFC = 11;</code>
   */
  TONNE_PFC(11),
  /**
   * <code>TONNE_SF6 = 12;</code>
   */
  TONNE_SF6(12),
  /**
   * <code>TONNE_HFC = 13;</code>
   */
  TONNE_HFC(13),
  /**
   * <code>TONNE_CFC = 14;</code>
   */
  TONNE_CFC(14),
  /**
   * <code>TONNE_HFC23 = 15;</code>
   */
  TONNE_HFC23(15),
  /**
   * <code>TONNE_HFC32 = 16;</code>
   */
  TONNE_HFC32(16),
  /**
   * <code>TONNE_HFC125 = 17;</code>
   */
  TONNE_HFC125(17),
  /**
   * <code>TONNE_HFC134a = 18;</code>
   */
  TONNE_HFC134a(18),
  /**
   * <code>TONNE_HFC143a = 19;</code>
   */
  TONNE_HFC143a(19),
  /**
   * <code>TONNE_HFC227ea = 20;</code>
   */
  TONNE_HFC227ea(20),
  /**
   * <code>TONNE_HFC245fa = 21;</code>
   */
  TONNE_HFC245fa(21),
  /**
   * <code>TONNE_HFC365mfc = 22;</code>
   */
  TONNE_HFC365mfc(22),
  /**
   * <code>TONNE_HFC4310mee = 23;</code>
   */
  TONNE_HFC4310mee(23),
  /**
   * <code>TONNE_C2F6 = 24;</code>
   */
  TONNE_C2F6(24),
  /**
   * <code>TONNE_C3F8 = 25;</code>
   */
  TONNE_C3F8(25),
  /**
   * <code>TONNE_C4F10 = 26;</code>
   */
  TONNE_C4F10(26),
  /**
   * <code>TONNE_C5F12 = 27;</code>
   */
  TONNE_C5F12(27),
  /**
   * <code>TONNE_C6F14 = 28;</code>
   */
  TONNE_C6F14(28),
  /**
   * <code>TONNE_C7F16 = 29;</code>
   */
  TONNE_C7F16(29),
  /**
   * <code>TONNE_C8F18 = 30;</code>
   */
  TONNE_C8F18(30),
  /**
   * <code>TONNE_C10F18 = 31;</code>
   */
  TONNE_C10F18(31),
  /**
   * <code>TONNE_C12F18 = 32;</code>
   */
  TONNE_C12F18(32),
  /**
   * <code>TONNE_C14F18 = 33;</code>
   */
  TONNE_C14F18(33),
  /**
   * <code>TONNE_C16F18 = 34;</code>
   */
  TONNE_C16F18(34),
  /**
   * <code>TONNE_C18F18 = 35;</code>
   */
  TONNE_C18F18(35),
  /**
   * <code>TONNE_C20F18 = 36;</code>
   */
  TONNE_C20F18(36),
  /**
   * <code>TONNE_C22F18 = 37;</code>
   */
  TONNE_C22F18(37),
  /**
   * <code>TONNE_C24F18 = 38;</code>
   */
  TONNE_C24F18(38),
  /**
   * <code>TONNE_C26F18 = 39;</code>
   */
  TONNE_C26F18(39),
  /**
   * <code>TONNE_C28F18 = 40;</code>
   */
  TONNE_C28F18(40),
  /**
   * <code>TONNE_C30F18 = 41;</code>
   */
  TONNE_C30F18(41),
  /**
   * <code>TONNE_C32F18 = 42;</code>
   */
  TONNE_C32F18(42),
  /**
   * <code>TONNE_C34F18 = 43;</code>
   */
  TONNE_C34F18(43),
  /**
   * <code>LITER = 100;</code>
   */
  LITER(100),
  /**
   * <code>KILOGRAM = 101;</code>
   */
  KILOGRAM(101),
  /**
   * <code>CUBIC_METER = 102;</code>
   */
  CUBIC_METER(102),
  /**
   * <code>KILOWATT = 103;</code>
   */
  KILOWATT(103),
  /**
   * <code>MEGAWATT = 104;</code>
   */
  MEGAWATT(104),
  /**
   * <code>MEGAJUOLE = 105;</code>
   */
  MEGAJUOLE(105),
  /**
   * <code>KILOMETER = 106;</code>
   */
  KILOMETER(106),
  /**
   * <code>SQUARE_METER = 107;</code>
   */
  SQUARE_METER(107),
  /**
   * <code>TONNE = 108;</code>
   */
  TONNE(108),
  /**
   * <code>MW_H = 109;</code>
   */
  MW_H(109),
  /**
   * <code>KW_H = 110;</code>
   */
  KW_H(110),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>TONNE_CO2E = 0;</code>
   */
  public static final int TONNE_CO2E_VALUE = 0;
  /**
   * <code>TONNE_CO2 = 1;</code>
   */
  public static final int TONNE_CO2_VALUE = 1;
  /**
   * <code>TONNE_CH4 = 2;</code>
   */
  public static final int TONNE_CH4_VALUE = 2;
  /**
   * <code>TONNE_N2O = 3;</code>
   */
  public static final int TONNE_N2O_VALUE = 3;
  /**
   * <code>TONNE_S = 4;</code>
   */
  public static final int TONNE_S_VALUE = 4;
  /**
   * <code>TONNE_NOX = 5;</code>
   */
  public static final int TONNE_NOX_VALUE = 5;
  /**
   * <code>TONNE_SOX = 6;</code>
   */
  public static final int TONNE_SOX_VALUE = 6;
  /**
   * <code>TONNE_PM10 = 7;</code>
   */
  public static final int TONNE_PM10_VALUE = 7;
  /**
   * <code>TONNE_PM2_5 = 8;</code>
   */
  public static final int TONNE_PM2_5_VALUE = 8;
  /**
   * <code>TONNE_VOC = 9;</code>
   */
  public static final int TONNE_VOC_VALUE = 9;
  /**
   * <code>TONNE_NH3 = 10;</code>
   */
  public static final int TONNE_NH3_VALUE = 10;
  /**
   * <code>TONNE_PFC = 11;</code>
   */
  public static final int TONNE_PFC_VALUE = 11;
  /**
   * <code>TONNE_SF6 = 12;</code>
   */
  public static final int TONNE_SF6_VALUE = 12;
  /**
   * <code>TONNE_HFC = 13;</code>
   */
  public static final int TONNE_HFC_VALUE = 13;
  /**
   * <code>TONNE_CFC = 14;</code>
   */
  public static final int TONNE_CFC_VALUE = 14;
  /**
   * <code>TONNE_HFC23 = 15;</code>
   */
  public static final int TONNE_HFC23_VALUE = 15;
  /**
   * <code>TONNE_HFC32 = 16;</code>
   */
  public static final int TONNE_HFC32_VALUE = 16;
  /**
   * <code>TONNE_HFC125 = 17;</code>
   */
  public static final int TONNE_HFC125_VALUE = 17;
  /**
   * <code>TONNE_HFC134a = 18;</code>
   */
  public static final int TONNE_HFC134a_VALUE = 18;
  /**
   * <code>TONNE_HFC143a = 19;</code>
   */
  public static final int TONNE_HFC143a_VALUE = 19;
  /**
   * <code>TONNE_HFC227ea = 20;</code>
   */
  public static final int TONNE_HFC227ea_VALUE = 20;
  /**
   * <code>TONNE_HFC245fa = 21;</code>
   */
  public static final int TONNE_HFC245fa_VALUE = 21;
  /**
   * <code>TONNE_HFC365mfc = 22;</code>
   */
  public static final int TONNE_HFC365mfc_VALUE = 22;
  /**
   * <code>TONNE_HFC4310mee = 23;</code>
   */
  public static final int TONNE_HFC4310mee_VALUE = 23;
  /**
   * <code>TONNE_C2F6 = 24;</code>
   */
  public static final int TONNE_C2F6_VALUE = 24;
  /**
   * <code>TONNE_C3F8 = 25;</code>
   */
  public static final int TONNE_C3F8_VALUE = 25;
  /**
   * <code>TONNE_C4F10 = 26;</code>
   */
  public static final int TONNE_C4F10_VALUE = 26;
  /**
   * <code>TONNE_C5F12 = 27;</code>
   */
  public static final int TONNE_C5F12_VALUE = 27;
  /**
   * <code>TONNE_C6F14 = 28;</code>
   */
  public static final int TONNE_C6F14_VALUE = 28;
  /**
   * <code>TONNE_C7F16 = 29;</code>
   */
  public static final int TONNE_C7F16_VALUE = 29;
  /**
   * <code>TONNE_C8F18 = 30;</code>
   */
  public static final int TONNE_C8F18_VALUE = 30;
  /**
   * <code>TONNE_C10F18 = 31;</code>
   */
  public static final int TONNE_C10F18_VALUE = 31;
  /**
   * <code>TONNE_C12F18 = 32;</code>
   */
  public static final int TONNE_C12F18_VALUE = 32;
  /**
   * <code>TONNE_C14F18 = 33;</code>
   */
  public static final int TONNE_C14F18_VALUE = 33;
  /**
   * <code>TONNE_C16F18 = 34;</code>
   */
  public static final int TONNE_C16F18_VALUE = 34;
  /**
   * <code>TONNE_C18F18 = 35;</code>
   */
  public static final int TONNE_C18F18_VALUE = 35;
  /**
   * <code>TONNE_C20F18 = 36;</code>
   */
  public static final int TONNE_C20F18_VALUE = 36;
  /**
   * <code>TONNE_C22F18 = 37;</code>
   */
  public static final int TONNE_C22F18_VALUE = 37;
  /**
   * <code>TONNE_C24F18 = 38;</code>
   */
  public static final int TONNE_C24F18_VALUE = 38;
  /**
   * <code>TONNE_C26F18 = 39;</code>
   */
  public static final int TONNE_C26F18_VALUE = 39;
  /**
   * <code>TONNE_C28F18 = 40;</code>
   */
  public static final int TONNE_C28F18_VALUE = 40;
  /**
   * <code>TONNE_C30F18 = 41;</code>
   */
  public static final int TONNE_C30F18_VALUE = 41;
  /**
   * <code>TONNE_C32F18 = 42;</code>
   */
  public static final int TONNE_C32F18_VALUE = 42;
  /**
   * <code>TONNE_C34F18 = 43;</code>
   */
  public static final int TONNE_C34F18_VALUE = 43;
  /**
   * <code>LITER = 100;</code>
   */
  public static final int LITER_VALUE = 100;
  /**
   * <code>KILOGRAM = 101;</code>
   */
  public static final int KILOGRAM_VALUE = 101;
  /**
   * <code>CUBIC_METER = 102;</code>
   */
  public static final int CUBIC_METER_VALUE = 102;
  /**
   * <code>KILOWATT = 103;</code>
   */
  public static final int KILOWATT_VALUE = 103;
  /**
   * <code>MEGAWATT = 104;</code>
   */
  public static final int MEGAWATT_VALUE = 104;
  /**
   * <code>MEGAJUOLE = 105;</code>
   */
  public static final int MEGAJUOLE_VALUE = 105;
  /**
   * <code>KILOMETER = 106;</code>
   */
  public static final int KILOMETER_VALUE = 106;
  /**
   * <code>SQUARE_METER = 107;</code>
   */
  public static final int SQUARE_METER_VALUE = 107;
  /**
   * <code>TONNE = 108;</code>
   */
  public static final int TONNE_VALUE = 108;
  /**
   * <code>MW_H = 109;</code>
   */
  public static final int MW_H_VALUE = 109;
  /**
   * <code>KW_H = 110;</code>
   */
  public static final int KW_H_VALUE = 110;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Unit valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Unit forNumber(int value) {
    switch (value) {
      case 0: return TONNE_CO2E;
      case 1: return TONNE_CO2;
      case 2: return TONNE_CH4;
      case 3: return TONNE_N2O;
      case 4: return TONNE_S;
      case 5: return TONNE_NOX;
      case 6: return TONNE_SOX;
      case 7: return TONNE_PM10;
      case 8: return TONNE_PM2_5;
      case 9: return TONNE_VOC;
      case 10: return TONNE_NH3;
      case 11: return TONNE_PFC;
      case 12: return TONNE_SF6;
      case 13: return TONNE_HFC;
      case 14: return TONNE_CFC;
      case 15: return TONNE_HFC23;
      case 16: return TONNE_HFC32;
      case 17: return TONNE_HFC125;
      case 18: return TONNE_HFC134a;
      case 19: return TONNE_HFC143a;
      case 20: return TONNE_HFC227ea;
      case 21: return TONNE_HFC245fa;
      case 22: return TONNE_HFC365mfc;
      case 23: return TONNE_HFC4310mee;
      case 24: return TONNE_C2F6;
      case 25: return TONNE_C3F8;
      case 26: return TONNE_C4F10;
      case 27: return TONNE_C5F12;
      case 28: return TONNE_C6F14;
      case 29: return TONNE_C7F16;
      case 30: return TONNE_C8F18;
      case 31: return TONNE_C10F18;
      case 32: return TONNE_C12F18;
      case 33: return TONNE_C14F18;
      case 34: return TONNE_C16F18;
      case 35: return TONNE_C18F18;
      case 36: return TONNE_C20F18;
      case 37: return TONNE_C22F18;
      case 38: return TONNE_C24F18;
      case 39: return TONNE_C26F18;
      case 40: return TONNE_C28F18;
      case 41: return TONNE_C30F18;
      case 42: return TONNE_C32F18;
      case 43: return TONNE_C34F18;
      case 100: return LITER;
      case 101: return KILOGRAM;
      case 102: return CUBIC_METER;
      case 103: return KILOWATT;
      case 104: return MEGAWATT;
      case 105: return MEGAJUOLE;
      case 106: return KILOMETER;
      case 107: return SQUARE_METER;
      case 108: return TONNE;
      case 109: return MW_H;
      case 110: return KW_H;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Unit>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Unit> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Unit>() {
          public Unit findValueByNumber(int number) {
            return Unit.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.carboncall.metadata.MetadataOuterClass.getDescriptor().getEnumTypes().get(6);
  }

  private static final Unit[] VALUES = values();

  public static Unit valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Unit(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:carboncall.metadata.Unit)
}

